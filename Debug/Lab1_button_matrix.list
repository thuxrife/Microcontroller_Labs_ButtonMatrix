
Lab1_button_matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a54  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001c2c  08001c2c  00002c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c54  08001c54  00003048  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001c54  08001c54  00003048  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001c54  08001c54  00003048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c54  08001c54  00002c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c58  08001c58  00002c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08001c5c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000048  08001ca4  00003048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08001ca4  00003088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004cfa  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011e4  00000000  00000000  00007d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005f0  00000000  00000000  00008f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000467  00000000  00000000  00009548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023248  00000000  00000000  000099af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000602f  00000000  00000000  0002cbf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df11c  00000000  00000000  00032c26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111d42  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001614  00000000  00000000  00111d88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0011339c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000048 	.word	0x20000048
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001c14 	.word	0x08001c14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000004c 	.word	0x2000004c
 8000214:	08001c14 	.word	0x08001c14

08000218 <HC595_Write>:
#define HC595_LATCH_PIN       GPIO_PIN_1      // RCLK (ST_CP) -> PA1

#define HC595_CLOCK_PORT      GPIOA
#define HC595_CLOCK_PIN       GPIO_PIN_4      // SRCLK (SH_CP) -> PA4

void HC595_Write(uint8_t data_to_send) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
	// 1. Latch LOW: Prepare the Latch register to receive new data
	HAL_GPIO_WritePin(HC595_LATCH_PORT, HC595_LATCH_PIN, GPIO_PIN_RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	2102      	movs	r1, #2
 8000226:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800022a:	f000 feed 	bl	8001008 <HAL_GPIO_WritePin>

	// 2. Shift Data (MSB First)
	for (int i = 0; i < 8; i++) {
 800022e:	2300      	movs	r3, #0
 8000230:	60fb      	str	r3, [r7, #12]
 8000232:	e025      	b.n	8000280 <HC595_Write+0x68>
		// Clock LOW: Prepare for a new bit
		HAL_GPIO_WritePin(HC595_CLOCK_PORT, HC595_CLOCK_PIN, GPIO_PIN_RESET);
 8000234:	2200      	movs	r2, #0
 8000236:	2110      	movs	r1, #16
 8000238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800023c:	f000 fee4 	bl	8001008 <HAL_GPIO_WritePin>

		// Set Data Pin (SER) based on the current bit (7-i for MSB First)
		//THIS IS AND GATE of 1
		if ((data_to_send >> (7 - i)) & 0x01) {
 8000240:	79fa      	ldrb	r2, [r7, #7]
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	f1c3 0307 	rsb	r3, r3, #7
 8000248:	fa42 f303 	asr.w	r3, r2, r3
 800024c:	f003 0301 	and.w	r3, r3, #1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d006      	beq.n	8000262 <HC595_Write+0x4a>
			HAL_GPIO_WritePin(HC595_DATA_PORT, HC595_DATA_PIN, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	2101      	movs	r1, #1
 8000258:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800025c:	f000 fed4 	bl	8001008 <HAL_GPIO_WritePin>
 8000260:	e005      	b.n	800026e <HC595_Write+0x56>
		} else {
			HAL_GPIO_WritePin(HC595_DATA_PORT, HC595_DATA_PIN, GPIO_PIN_RESET);
 8000262:	2200      	movs	r2, #0
 8000264:	2101      	movs	r1, #1
 8000266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800026a:	f000 fecd 	bl	8001008 <HAL_GPIO_WritePin>
		}

		// Clock HIGH: Shift the set bit into the 74HC595
		HAL_GPIO_WritePin(HC595_CLOCK_PORT, HC595_CLOCK_PIN, GPIO_PIN_SET);
 800026e:	2201      	movs	r2, #1
 8000270:	2110      	movs	r1, #16
 8000272:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000276:	f000 fec7 	bl	8001008 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	3301      	adds	r3, #1
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	2b07      	cmp	r3, #7
 8000284:	ddd6      	ble.n	8000234 <HC595_Write+0x1c>

	}

	// 3. Latch HIGH: Transfer the shifted data from the Shift Register to the Storage Register
	// This updates the outputs (LEDs)
	HAL_GPIO_WritePin(HC595_LATCH_PORT, HC595_LATCH_PIN, GPIO_PIN_SET);
 8000286:	2201      	movs	r2, #1
 8000288:	2102      	movs	r1, #2
 800028a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800028e:	f000 febb 	bl	8001008 <HAL_GPIO_WritePin>
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002a0:	f000 fb97 	bl	80009d2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002a4:	f000 f820 	bl	80002e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002a8:	f000 f86a 	bl	8000380 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	HC595_Write(CLOSED_LED);
 80002ac:	20ff      	movs	r0, #255	@ 0xff
 80002ae:	f7ff ffb3 	bl	8000218 <HC595_Write>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		static uint32_t BTMX_TimeStamp = 0;
		if (HAL_GetTick() > BTMX_TimeStamp) {
 80002b2:	f000 fbf3 	bl	8000a9c <HAL_GetTick>
 80002b6:	4602      	mov	r2, r0
 80002b8:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <main+0x44>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d9f8      	bls.n	80002b2 <main+0x16>
			BTMX_TimeStamp = HAL_GetTick() + 25;
 80002c0:	f000 fbec 	bl	8000a9c <HAL_GetTick>
 80002c4:	4603      	mov	r3, r0
 80002c6:	3319      	adds	r3, #25
 80002c8:	4a05      	ldr	r2, [pc, #20]	@ (80002e0 <main+0x44>)
 80002ca:	6013      	str	r3, [r2, #0]
			ButtonMatrixRead();
 80002cc:	f000 f9a6 	bl	800061c <ButtonMatrixRead>

			// Only process input if the system is not locked
			if (is_locked == 0) {
 80002d0:	4b04      	ldr	r3, [pc, #16]	@ (80002e4 <main+0x48>)
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d1ec      	bne.n	80002b2 <main+0x16>
				Register_Number_Handler();
 80002d8:	f000 fa3e 	bl	8000758 <Register_Number_Handler>
	while (1) {
 80002dc:	e7e9      	b.n	80002b2 <main+0x16>
 80002de:	bf00      	nop
 80002e0:	2000007c 	.word	0x2000007c
 80002e4:	20000079 	.word	0x20000079

080002e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b094      	sub	sp, #80	@ 0x50
 80002ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	2238      	movs	r2, #56	@ 0x38
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 fc60 	bl	8001bbc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800030a:	2000      	movs	r0, #0
 800030c:	f000 feac 	bl	8001068 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000310:	2302      	movs	r3, #2
 8000312:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000314:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000318:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031a:	2340      	movs	r3, #64	@ 0x40
 800031c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031e:	2302      	movs	r3, #2
 8000320:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000322:	2302      	movs	r3, #2
 8000324:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000326:	2304      	movs	r3, #4
 8000328:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800032a:	2355      	movs	r3, #85	@ 0x55
 800032c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800032e:	2302      	movs	r3, #2
 8000330:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000332:	2302      	movs	r3, #2
 8000334:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000336:	2302      	movs	r3, #2
 8000338:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	4618      	mov	r0, r3
 8000340:	f000 ff46 	bl	80011d0 <HAL_RCC_OscConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x66>
		Error_Handler();
 800034a:	f000 fa9f 	bl	800088c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800034e:	230f      	movs	r3, #15
 8000350:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000352:	2303      	movs	r3, #3
 8000354:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2104      	movs	r1, #4
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fa44 	bl	80017f4 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x8e>
		Error_Handler();
 8000372:	f000 fa8b 	bl	800088c <Error_Handler>
	}
}
 8000376:	bf00      	nop
 8000378:	3750      	adds	r7, #80	@ 0x50
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b08a      	sub	sp, #40	@ 0x28
 8000384:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000386:	f107 0314 	add.w	r3, r7, #20
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
 8000394:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000396:	4b68      	ldr	r3, [pc, #416]	@ (8000538 <MX_GPIO_Init+0x1b8>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039a:	4a67      	ldr	r2, [pc, #412]	@ (8000538 <MX_GPIO_Init+0x1b8>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003a2:	4b65      	ldr	r3, [pc, #404]	@ (8000538 <MX_GPIO_Init+0x1b8>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a6:	f003 0304 	and.w	r3, r3, #4
 80003aa:	613b      	str	r3, [r7, #16]
 80003ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80003ae:	4b62      	ldr	r3, [pc, #392]	@ (8000538 <MX_GPIO_Init+0x1b8>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b2:	4a61      	ldr	r2, [pc, #388]	@ (8000538 <MX_GPIO_Init+0x1b8>)
 80003b4:	f043 0320 	orr.w	r3, r3, #32
 80003b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ba:	4b5f      	ldr	r3, [pc, #380]	@ (8000538 <MX_GPIO_Init+0x1b8>)
 80003bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003be:	f003 0320 	and.w	r3, r3, #32
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	4b5c      	ldr	r3, [pc, #368]	@ (8000538 <MX_GPIO_Init+0x1b8>)
 80003c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ca:	4a5b      	ldr	r2, [pc, #364]	@ (8000538 <MX_GPIO_Init+0x1b8>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003d2:	4b59      	ldr	r3, [pc, #356]	@ (8000538 <MX_GPIO_Init+0x1b8>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003de:	4b56      	ldr	r3, [pc, #344]	@ (8000538 <MX_GPIO_Init+0x1b8>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e2:	4a55      	ldr	r2, [pc, #340]	@ (8000538 <MX_GPIO_Init+0x1b8>)
 80003e4:	f043 0302 	orr.w	r3, r3, #2
 80003e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ea:	4b53      	ldr	r3, [pc, #332]	@ (8000538 <MX_GPIO_Init+0x1b8>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003ee:	f003 0302 	and.w	r3, r3, #2
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80003f6:	2200      	movs	r2, #0
 80003f8:	f240 1133 	movw	r1, #307	@ 0x133
 80003fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000400:	f000 fe02 	bl	8001008 <HAL_GPIO_WritePin>
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | LD2_Pin | GPIO_PIN_8,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10 | GPIO_PIN_4, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800040a:	484c      	ldr	r0, [pc, #304]	@ (800053c <MX_GPIO_Init+0x1bc>)
 800040c:	f000 fdfc 	bl	8001008 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000410:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000414:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000416:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800041a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	4619      	mov	r1, r3
 8000426:	4846      	ldr	r0, [pc, #280]	@ (8000540 <MX_GPIO_Init+0x1c0>)
 8000428:	f000 fc54 	bl	8000cd4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | LD2_Pin;
 800042c:	2333      	movs	r3, #51	@ 0x33
 800042e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000430:	2301      	movs	r3, #1
 8000432:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000438:	2300      	movs	r3, #0
 800043a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043c:	f107 0314 	add.w	r3, r7, #20
 8000440:	4619      	mov	r1, r3
 8000442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000446:	f000 fc45 	bl	8000cd4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
	GPIO_InitStruct.Pin = LPUART1_TX_Pin | LPUART1_RX_Pin;
 800044a:	230c      	movs	r3, #12
 800044c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800044e:	2302      	movs	r3, #2
 8000450:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000452:	2300      	movs	r3, #0
 8000454:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000456:	2300      	movs	r3, #0
 8000458:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800045a:	230c      	movs	r3, #12
 800045c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045e:	f107 0314 	add.w	r3, r7, #20
 8000462:	4619      	mov	r1, r3
 8000464:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000468:	f000 fc34 	bl	8000cd4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA7 PA9 */
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_9;
 800046c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000470:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000472:	2300      	movs	r3, #0
 8000474:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000476:	2301      	movs	r3, #1
 8000478:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	4619      	mov	r1, r3
 8000480:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000484:	f000 fc26 	bl	8000cd4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB4 */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_4;
 8000488:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 800048c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800048e:	2311      	movs	r3, #17
 8000490:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000496:	2300      	movs	r3, #0
 8000498:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	4619      	mov	r1, r3
 80004a0:	4826      	ldr	r0, [pc, #152]	@ (800053c <MX_GPIO_Init+0x1bc>)
 80004a2:	f000 fc17 	bl	8000cd4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004a6:	2380      	movs	r3, #128	@ 0x80
 80004a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004aa:	2300      	movs	r3, #0
 80004ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ae:	2301      	movs	r3, #1
 80004b0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b2:	f107 0314 	add.w	r3, r7, #20
 80004b6:	4619      	mov	r1, r3
 80004b8:	4821      	ldr	r0, [pc, #132]	@ (8000540 <MX_GPIO_Init+0x1c0>)
 80004ba:	f000 fc0b 	bl	8000cd4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80004c4:	2311      	movs	r3, #17
 80004c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004cc:	2300      	movs	r3, #0
 80004ce:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	4619      	mov	r1, r3
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004da:	f000 fbfb 	bl	8000cd4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004de:	2320      	movs	r3, #32
 80004e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80004e6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	4619      	mov	r1, r3
 80004f2:	4812      	ldr	r0, [pc, #72]	@ (800053c <MX_GPIO_Init+0x1bc>)
 80004f4:	f000 fbee 	bl	8000cd4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004f8:	2340      	movs	r3, #64	@ 0x40
 80004fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000500:	2301      	movs	r3, #1
 8000502:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000504:	f107 0314 	add.w	r3, r7, #20
 8000508:	4619      	mov	r1, r3
 800050a:	480c      	ldr	r0, [pc, #48]	@ (800053c <MX_GPIO_Init+0x1bc>)
 800050c:	f000 fbe2 	bl	8000cd4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000510:	2200      	movs	r2, #0
 8000512:	2100      	movs	r1, #0
 8000514:	2017      	movs	r0, #23
 8000516:	f000 fba8 	bl	8000c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800051a:	2017      	movs	r0, #23
 800051c:	f000 fbbf 	bl	8000c9e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	2100      	movs	r1, #0
 8000524:	2028      	movs	r0, #40	@ 0x28
 8000526:	f000 fba0 	bl	8000c6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800052a:	2028      	movs	r0, #40	@ 0x28
 800052c:	f000 fbb7 	bl	8000c9e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000530:	bf00      	nop
 8000532:	3728      	adds	r7, #40	@ 0x28
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000
 800053c:	48000400 	.word	0x48000400
 8000540:	48000800 	.word	0x48000800

08000544 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
	if (is_locked == 1) {
 800054e:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <HAL_GPIO_EXTI_Callback+0x38>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b01      	cmp	r3, #1
 8000554:	d00e      	beq.n	8000574 <HAL_GPIO_EXTI_Callback+0x30>
		return;
	}

	if (GPIO_Pin == GPIO_PIN_5) {
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	2b20      	cmp	r3, #32
 800055a:	d10c      	bne.n	8000576 <HAL_GPIO_EXTI_Callback+0x32>
		Clear_Register_to_Zeros();
 800055c:	f000 f8dc 	bl	8000718 <Clear_Register_to_Zeros>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2120      	movs	r1, #32
 8000564:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000568:	f000 fd4e 	bl	8001008 <HAL_GPIO_WritePin>
		HC595_Write(CLOSED_LED);
 800056c:	20ff      	movs	r0, #255	@ 0xff
 800056e:	f7ff fe53 	bl	8000218 <HC595_Write>
 8000572:	e000      	b.n	8000576 <HAL_GPIO_EXTI_Callback+0x32>
		return;
 8000574:	bf00      	nop
	}
}
 8000576:	3708      	adds	r7, #8
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20000079 	.word	0x20000079

08000580 <Keypad_Get_Key>:

uint8_t Keypad_Get_Key(void) {
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
	uint32_t current_state = ButtonState;
 8000586:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <Keypad_Get_Key+0x40>)
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	607b      	str	r3, [r7, #4]
	uint32_t new_press = current_state & (~LastButtonState);
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <Keypad_Get_Key+0x44>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	43db      	mvns	r3, r3
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	4013      	ands	r3, r2
 8000596:	603b      	str	r3, [r7, #0]
	LastButtonState = current_state;
 8000598:	4a0a      	ldr	r2, [pc, #40]	@ (80005c4 <Keypad_Get_Key+0x44>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]

	if (new_press != 0) {
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d006      	beq.n	80005b2 <Keypad_Get_Key+0x32>
		return (uint8_t) __builtin_ctz(new_press);
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	fa93 f3a3 	rbit	r3, r3
 80005aa:	fab3 f383 	clz	r3, r3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	e000      	b.n	80005b4 <Keypad_Get_Key+0x34>
	}

	return 255; // No new key pressed
 80005b2:	23ff      	movs	r3, #255	@ 0xff
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000072 	.word	0x20000072
 80005c4:	20000074 	.word	0x20000074

080005c8 <Check_Register_Number>:

uint8_t Check_Register_Number(void) {
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
	// 1. Check Length: The input MUST be exactly 11 digits long.
	if (Current_Digit_Index != MAX_REG_DIGITS) {
 80005ce:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <Check_Register_Number+0x48>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b0b      	cmp	r3, #11
 80005d4:	d001      	beq.n	80005da <Check_Register_Number+0x12>
		return 0; // Wrong length
 80005d6:	2300      	movs	r3, #0
 80005d8:	e013      	b.n	8000602 <Check_Register_Number+0x3a>
	}

	// 2. Compare Content: Loop through the array to check each character.
	for (uint8_t i = 0; i < MAX_REG_DIGITS; i++) {
 80005da:	2300      	movs	r3, #0
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	e00c      	b.n	80005fa <Check_Register_Number+0x32>
		if (Register_Number[i] != TARGET_NUMBER[i]) {
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000614 <Check_Register_Number+0x4c>)
 80005e4:	5cd2      	ldrb	r2, [r2, r3]
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	490b      	ldr	r1, [pc, #44]	@ (8000618 <Check_Register_Number+0x50>)
 80005ea:	5ccb      	ldrb	r3, [r1, r3]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d001      	beq.n	80005f4 <Check_Register_Number+0x2c>
			return 0; // Mismatch found
 80005f0:	2300      	movs	r3, #0
 80005f2:	e006      	b.n	8000602 <Check_Register_Number+0x3a>
	for (uint8_t i = 0; i < MAX_REG_DIGITS; i++) {
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	3301      	adds	r3, #1
 80005f8:	71fb      	strb	r3, [r7, #7]
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b0a      	cmp	r3, #10
 80005fe:	d9ef      	bls.n	80005e0 <Check_Register_Number+0x18>
		}
	}

	// 3. Match: If the loop completes, the numbers are identical.
	return 1;
 8000600:	2301      	movs	r3, #1
}
 8000602:	4618      	mov	r0, r3
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000070 	.word	0x20000070
 8000614:	20000064 	.word	0x20000064
 8000618:	08001c2c 	.word	0x08001c2c

0800061c <ButtonMatrixRead>:

void ButtonMatrixRead() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	static uint8_t X = 0;

	for (int i = 0; i < 4; i++) {
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	e037      	b.n	8000698 <ButtonMatrixRead+0x7c>
		uint8_t bit_pos = i + (X * 4);
 8000628:	4b36      	ldr	r3, [pc, #216]	@ (8000704 <ButtonMatrixRead+0xe8>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	b2da      	uxtb	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	4413      	add	r3, r2
 8000636:	70bb      	strb	r3, [r7, #2]

		if (HAL_GPIO_ReadPin(BMX_L[i].Port, BMX_L[i].Pin) == GPIO_PIN_RESET) {
 8000638:	4a33      	ldr	r2, [pc, #204]	@ (8000708 <ButtonMatrixRead+0xec>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000640:	4931      	ldr	r1, [pc, #196]	@ (8000708 <ButtonMatrixRead+0xec>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	440b      	add	r3, r1
 8000648:	889b      	ldrh	r3, [r3, #4]
 800064a:	4619      	mov	r1, r3
 800064c:	4610      	mov	r0, r2
 800064e:	f000 fcc3 	bl	8000fd8 <HAL_GPIO_ReadPin>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d10d      	bne.n	8000674 <ButtonMatrixRead+0x58>
			ButtonState |= 1 << (bit_pos);
 8000658:	78bb      	ldrb	r3, [r7, #2]
 800065a:	2201      	movs	r2, #1
 800065c:	fa02 f303 	lsl.w	r3, r2, r3
 8000660:	b21a      	sxth	r2, r3
 8000662:	4b2a      	ldr	r3, [pc, #168]	@ (800070c <ButtonMatrixRead+0xf0>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	b21b      	sxth	r3, r3
 8000668:	4313      	orrs	r3, r2
 800066a:	b21b      	sxth	r3, r3
 800066c:	b29a      	uxth	r2, r3
 800066e:	4b27      	ldr	r3, [pc, #156]	@ (800070c <ButtonMatrixRead+0xf0>)
 8000670:	801a      	strh	r2, [r3, #0]
 8000672:	e00e      	b.n	8000692 <ButtonMatrixRead+0x76>
		}

		else {
			ButtonState &= ~(1 << bit_pos);
 8000674:	78bb      	ldrb	r3, [r7, #2]
 8000676:	2201      	movs	r2, #1
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	b21b      	sxth	r3, r3
 800067e:	43db      	mvns	r3, r3
 8000680:	b21a      	sxth	r2, r3
 8000682:	4b22      	ldr	r3, [pc, #136]	@ (800070c <ButtonMatrixRead+0xf0>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	b21b      	sxth	r3, r3
 8000688:	4013      	ands	r3, r2
 800068a:	b21b      	sxth	r3, r3
 800068c:	b29a      	uxth	r2, r3
 800068e:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <ButtonMatrixRead+0xf0>)
 8000690:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i < 4; i++) {
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	3301      	adds	r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2b03      	cmp	r3, #3
 800069c:	ddc4      	ble.n	8000628 <ButtonMatrixRead+0xc>
		}
	}

	HAL_GPIO_WritePin(BMX_R[X].Port, BMX_R[X].Pin, GPIO_PIN_SET);
 800069e:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <ButtonMatrixRead+0xe8>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <ButtonMatrixRead+0xf4>)
 80006a6:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 80006aa:	4b16      	ldr	r3, [pc, #88]	@ (8000704 <ButtonMatrixRead+0xe8>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4a18      	ldr	r2, [pc, #96]	@ (8000710 <ButtonMatrixRead+0xf4>)
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	4413      	add	r3, r2
 80006b4:	889b      	ldrh	r3, [r3, #4]
 80006b6:	2201      	movs	r2, #1
 80006b8:	4619      	mov	r1, r3
 80006ba:	f000 fca5 	bl	8001008 <HAL_GPIO_WritePin>
	uint8_t nextX = (X + 1) % 3;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <ButtonMatrixRead+0xe8>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <ButtonMatrixRead+0xf8>)
 80006c6:	fb83 3102 	smull	r3, r1, r3, r2
 80006ca:	17d3      	asrs	r3, r2, #31
 80006cc:	1ac9      	subs	r1, r1, r3
 80006ce:	460b      	mov	r3, r1
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	440b      	add	r3, r1
 80006d4:	1ad1      	subs	r1, r2, r3
 80006d6:	460b      	mov	r3, r1
 80006d8:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(BMX_R[nextX].Port, BMX_R[nextX].Pin, GPIO_PIN_RESET);
 80006da:	78fb      	ldrb	r3, [r7, #3]
 80006dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000710 <ButtonMatrixRead+0xf4>)
 80006de:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80006e2:	78fb      	ldrb	r3, [r7, #3]
 80006e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000710 <ButtonMatrixRead+0xf4>)
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	4413      	add	r3, r2
 80006ea:	889b      	ldrh	r3, [r3, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	4619      	mov	r1, r3
 80006f0:	f000 fc8a 	bl	8001008 <HAL_GPIO_WritePin>
	X = nextX;
 80006f4:	4a03      	ldr	r2, [pc, #12]	@ (8000704 <ButtonMatrixRead+0xe8>)
 80006f6:	78fb      	ldrb	r3, [r7, #3]
 80006f8:	7013      	strb	r3, [r2, #0]
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000080 	.word	0x20000080
 8000708:	20000000 	.word	0x20000000
 800070c:	20000072 	.word	0x20000072
 8000710:	20000020 	.word	0x20000020
 8000714:	55555556 	.word	0x55555556

08000718 <Clear_Register_to_Zeros>:

void Clear_Register_to_Zeros(void) {
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < MAX_REG_DIGITS; i++) {
 800071e:	2300      	movs	r3, #0
 8000720:	71fb      	strb	r3, [r7, #7]
 8000722:	e006      	b.n	8000732 <Clear_Register_to_Zeros+0x1a>
		Register_Number[i] = '0';
 8000724:	79fb      	ldrb	r3, [r7, #7]
 8000726:	4a0a      	ldr	r2, [pc, #40]	@ (8000750 <Clear_Register_to_Zeros+0x38>)
 8000728:	2130      	movs	r1, #48	@ 0x30
 800072a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < MAX_REG_DIGITS; i++) {
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	3301      	adds	r3, #1
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b0a      	cmp	r3, #10
 8000736:	d9f5      	bls.n	8000724 <Clear_Register_to_Zeros+0xc>
	}
	Current_Digit_Index = 0;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <Clear_Register_to_Zeros+0x3c>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]
	Register_Number[MAX_REG_DIGITS] = '\0'; // Ensure termination is correct
 800073e:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <Clear_Register_to_Zeros+0x38>)
 8000740:	2200      	movs	r2, #0
 8000742:	72da      	strb	r2, [r3, #11]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	20000064 	.word	0x20000064
 8000754:	20000070 	.word	0x20000070

08000758 <Register_Number_Handler>:

void Register_Number_Handler(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	if (is_locked == 1) {
 800075e:	4b45      	ldr	r3, [pc, #276]	@ (8000874 <Register_Number_Handler+0x11c>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d07f      	beq.n	8000866 <Register_Number_Handler+0x10e>
		return;
	}

	uint8_t key_index = Keypad_Get_Key();
 8000766:	f7ff ff0b 	bl	8000580 <Keypad_Get_Key>
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	if (key_index != KEYPAD_EMPTY && key_index < 12) {
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2bff      	cmp	r3, #255	@ 0xff
 8000772:	d07b      	beq.n	800086c <Register_Number_Handler+0x114>
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	2b0b      	cmp	r3, #11
 8000778:	d878      	bhi.n	800086c <Register_Number_Handler+0x114>
		char pressed_char = Keypad_Map[key_index];
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	4a3e      	ldr	r2, [pc, #248]	@ (8000878 <Register_Number_Handler+0x120>)
 800077e:	5cd3      	ldrb	r3, [r2, r3]
 8000780:	71bb      	strb	r3, [r7, #6]
		if (pressed_char == '\0') {
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d070      	beq.n	800086a <Register_Number_Handler+0x112>
			return;
		}

		if (pressed_char >= '0' && pressed_char <= '9') {
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	2b2f      	cmp	r3, #47	@ 0x2f
 800078c:	d917      	bls.n	80007be <Register_Number_Handler+0x66>
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	2b39      	cmp	r3, #57	@ 0x39
 8000792:	d814      	bhi.n	80007be <Register_Number_Handler+0x66>

			if (Current_Digit_Index < MAX_REG_DIGITS) {
 8000794:	4b39      	ldr	r3, [pc, #228]	@ (800087c <Register_Number_Handler+0x124>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b0a      	cmp	r3, #10
 800079a:	d867      	bhi.n	800086c <Register_Number_Handler+0x114>
				Register_Number[Current_Digit_Index++] = pressed_char;
 800079c:	4b37      	ldr	r3, [pc, #220]	@ (800087c <Register_Number_Handler+0x124>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	1c5a      	adds	r2, r3, #1
 80007a2:	b2d1      	uxtb	r1, r2
 80007a4:	4a35      	ldr	r2, [pc, #212]	@ (800087c <Register_Number_Handler+0x124>)
 80007a6:	7011      	strb	r1, [r2, #0]
 80007a8:	4619      	mov	r1, r3
 80007aa:	4a35      	ldr	r2, [pc, #212]	@ (8000880 <Register_Number_Handler+0x128>)
 80007ac:	79bb      	ldrb	r3, [r7, #6]
 80007ae:	5453      	strb	r3, [r2, r1]
				Register_Number[Current_Digit_Index] = '\0';
 80007b0:	4b32      	ldr	r3, [pc, #200]	@ (800087c <Register_Number_Handler+0x124>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b32      	ldr	r3, [pc, #200]	@ (8000880 <Register_Number_Handler+0x128>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	5499      	strb	r1, [r3, r2]
			if (Current_Digit_Index < MAX_REG_DIGITS) {
 80007bc:	e056      	b.n	800086c <Register_Number_Handler+0x114>
			}
		}

		else if (pressed_char == 'K') {
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	2b4b      	cmp	r3, #75	@ 0x4b
 80007c2:	d153      	bne.n	800086c <Register_Number_Handler+0x114>

			if (Current_Digit_Index > 0) {
 80007c4:	4b2d      	ldr	r3, [pc, #180]	@ (800087c <Register_Number_Handler+0x124>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d04f      	beq.n	800086c <Register_Number_Handler+0x114>

				uint8_t match = Check_Register_Number();
 80007cc:	f7ff fefc 	bl	80005c8 <Check_Register_Number>
 80007d0:	4603      	mov	r3, r0
 80007d2:	717b      	strb	r3, [r7, #5]

				if (match == 1) {
 80007d4:	797b      	ldrb	r3, [r7, #5]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d10f      	bne.n	80007fa <Register_Number_Handler+0xa2>
					Failed_Tries = 0;
 80007da:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <Register_Number_Handler+0x12c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
					Failed_Try_Mask = 0b11111111;
 80007e0:	4b29      	ldr	r3, [pc, #164]	@ (8000888 <Register_Number_Handler+0x130>)
 80007e2:	22ff      	movs	r2, #255	@ 0xff
 80007e4:	701a      	strb	r2, [r3, #0]
					HC595_Write(SUCCESS_LED_MASK);
 80007e6:	20fe      	movs	r0, #254	@ 0xfe
 80007e8:	f7ff fd16 	bl	8000218 <HC595_Write>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2120      	movs	r1, #32
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f4:	f000 fc08 	bl	8001008 <HAL_GPIO_WritePin>
 80007f8:	e038      	b.n	800086c <Register_Number_Handler+0x114>
				}

				else {
					Failed_Tries++;
 80007fa:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <Register_Number_Handler+0x12c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <Register_Number_Handler+0x12c>)
 8000804:	701a      	strb	r2, [r3, #0]

					if (Failed_Tries <= 3) {
 8000806:	4b1f      	ldr	r3, [pc, #124]	@ (8000884 <Register_Number_Handler+0x12c>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b03      	cmp	r3, #3
 800080c:	d814      	bhi.n	8000838 <Register_Number_Handler+0xe0>
						Failed_Try_Mask &= ~(1 << Failed_Tries);
 800080e:	4b1d      	ldr	r3, [pc, #116]	@ (8000884 <Register_Number_Handler+0x12c>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	461a      	mov	r2, r3
 8000814:	2301      	movs	r3, #1
 8000816:	4093      	lsls	r3, r2
 8000818:	b25b      	sxtb	r3, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	b25a      	sxtb	r2, r3
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <Register_Number_Handler+0x130>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b25b      	sxtb	r3, r3
 8000824:	4013      	ands	r3, r2
 8000826:	b25b      	sxtb	r3, r3
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <Register_Number_Handler+0x130>)
 800082c:	701a      	strb	r2, [r3, #0]
						HC595_Write(Failed_Try_Mask);
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <Register_Number_Handler+0x130>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff fcf0 	bl	8000218 <HC595_Write>
					}

					if (Failed_Tries >= 3) {
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <Register_Number_Handler+0x12c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b02      	cmp	r3, #2
 800083e:	d905      	bls.n	800084c <Register_Number_Handler+0xf4>
						is_locked = 1;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <Register_Number_Handler+0x11c>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
						HC595_Write(LOCKED_LED);
 8000846:	20f1      	movs	r0, #241	@ 0xf1
 8000848:	f7ff fce6 	bl	8000218 <HC595_Write>
					}

					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2120      	movs	r1, #32
 8000850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000854:	f000 fbd8 	bl	8001008 <HAL_GPIO_WritePin>
					Current_Digit_Index = 0;
 8000858:	4b08      	ldr	r3, [pc, #32]	@ (800087c <Register_Number_Handler+0x124>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
					Register_Number[0] = '\0';
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <Register_Number_Handler+0x128>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
 8000864:	e002      	b.n	800086c <Register_Number_Handler+0x114>
		return;
 8000866:	bf00      	nop
 8000868:	e000      	b.n	800086c <Register_Number_Handler+0x114>
			return;
 800086a:	bf00      	nop
				}
			}
		}
	}
}
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000079 	.word	0x20000079
 8000878:	08001c38 	.word	0x08001c38
 800087c:	20000070 	.word	0x20000070
 8000880:	20000064 	.word	0x20000064
 8000884:	20000078 	.word	0x20000078
 8000888:	20000038 	.word	0x20000038

0800088c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <Error_Handler+0x8>

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <HAL_MspInit+0x44>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	4a0e      	ldr	r2, [pc, #56]	@ (80008dc <HAL_MspInit+0x44>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <HAL_MspInit+0x44>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ba:	4a08      	ldr	r2, [pc, #32]	@ (80008dc <HAL_MspInit+0x44>)
 80008bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008ce:	f000 fc6f 	bl	80011b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <NMI_Handler+0x4>

080008e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <MemManage_Handler+0x4>

080008f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <UsageFault_Handler+0x4>

08000908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000936:	f000 f89f 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}

0800093e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000942:	2020      	movs	r0, #32
 8000944:	f000 fb78 	bl	8001038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000950:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000954:	f000 fb70 	bl	8001038 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000980:	480d      	ldr	r0, [pc, #52]	@ (80009b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000982:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000984:	f7ff ffea 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <LoopForever+0x6>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	@ (80009c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <LoopForever+0xe>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	@ (80009cc <LoopForever+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ae:	f001 f90d 	bl	8001bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b2:	f7ff fc73 	bl	800029c <main>

080009b6 <LoopForever>:

LoopForever:
    b LoopForever
 80009b6:	e7fe      	b.n	80009b6 <LoopForever>
  ldr   r0, =_estack
 80009b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 80009c4:	08001c5c 	.word	0x08001c5c
  ldr r2, =_sbss
 80009c8:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 80009cc:	20000088 	.word	0x20000088

080009d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_2_IRQHandler>

080009d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009d8:	2300      	movs	r3, #0
 80009da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f939 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f80e 	bl	8000a04 <HAL_InitTick>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d002      	beq.n	80009f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	e001      	b.n	80009f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f4:	f7ff ff50 	bl	8000898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f8:	79fb      	ldrb	r3, [r7, #7]

}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a10:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <HAL_InitTick+0x68>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d022      	beq.n	8000a5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a18:	4b15      	ldr	r3, [pc, #84]	@ (8000a70 <HAL_InitTick+0x6c>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <HAL_InitTick+0x68>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f944 	bl	8000cba <HAL_SYSTICK_Config>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d10f      	bne.n	8000a58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	d809      	bhi.n	8000a52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	6879      	ldr	r1, [r7, #4]
 8000a42:	f04f 30ff 	mov.w	r0, #4294967295
 8000a46:	f000 f910 	bl	8000c6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <HAL_InitTick+0x70>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	e007      	b.n	8000a62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	73fb      	strb	r3, [r7, #15]
 8000a56:	e004      	b.n	8000a62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	73fb      	strb	r3, [r7, #15]
 8000a5c:	e001      	b.n	8000a62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000044 	.word	0x20000044
 8000a70:	2000003c 	.word	0x2000003c
 8000a74:	20000040 	.word	0x20000040

08000a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <HAL_IncTick+0x1c>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <HAL_IncTick+0x20>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a03      	ldr	r2, [pc, #12]	@ (8000a94 <HAL_IncTick+0x1c>)
 8000a88:	6013      	str	r3, [r2, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	20000084 	.word	0x20000084
 8000a98:	20000044 	.word	0x20000044

08000a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000084 	.word	0x20000084

08000ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	60d3      	str	r3, [r2, #12]
}
 8000aec:	bf00      	nop
 8000aee:	3714      	adds	r7, #20
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b00:	4b04      	ldr	r3, [pc, #16]	@ (8000b14 <__NVIC_GetPriorityGrouping+0x18>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	f003 0307 	and.w	r3, r3, #7
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	db0b      	blt.n	8000b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 021f 	and.w	r2, r3, #31
 8000b30:	4907      	ldr	r1, [pc, #28]	@ (8000b50 <__NVIC_EnableIRQ+0x38>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	095b      	lsrs	r3, r3, #5
 8000b38:	2001      	movs	r0, #1
 8000b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	@ (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	@ (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	@ 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
         );
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	@ 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c20:	d301      	bcc.n	8000c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <SysTick_Config+0x40>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f7ff ff8e 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <SysTick_Config+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <SysTick_Config+0x40>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff29 	bl	8000ab4 <__NVIC_SetPriorityGrouping>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff40 	bl	8000afc <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff90 	bl	8000ba8 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5f 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff33 	bl	8000b18 <__NVIC_EnableIRQ>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffa4 	bl	8000c10 <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ce2:	e15a      	b.n	8000f9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 814c 	beq.w	8000f94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0303 	and.w	r3, r3, #3
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d005      	beq.n	8000d14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d130      	bne.n	8000d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	2203      	movs	r2, #3
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	091b      	lsrs	r3, r3, #4
 8000d60:	f003 0201 	and.w	r2, r3, #1
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	d017      	beq.n	8000db2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d123      	bne.n	8000e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	08da      	lsrs	r2, r3, #3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3208      	adds	r2, #8
 8000dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	691a      	ldr	r2, [r3, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0307 	and.w	r3, r3, #7
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	08da      	lsrs	r2, r3, #3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	6939      	ldr	r1, [r7, #16]
 8000e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0203 	and.w	r2, r3, #3
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 80a6 	beq.w	8000f94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e48:	4b5b      	ldr	r3, [pc, #364]	@ (8000fb8 <HAL_GPIO_Init+0x2e4>)
 8000e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e4c:	4a5a      	ldr	r2, [pc, #360]	@ (8000fb8 <HAL_GPIO_Init+0x2e4>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e54:	4b58      	ldr	r3, [pc, #352]	@ (8000fb8 <HAL_GPIO_Init+0x2e4>)
 8000e56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e60:	4a56      	ldr	r2, [pc, #344]	@ (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e8a:	d01f      	beq.n	8000ecc <HAL_GPIO_Init+0x1f8>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc0 <HAL_GPIO_Init+0x2ec>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d019      	beq.n	8000ec8 <HAL_GPIO_Init+0x1f4>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a4b      	ldr	r2, [pc, #300]	@ (8000fc4 <HAL_GPIO_Init+0x2f0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d013      	beq.n	8000ec4 <HAL_GPIO_Init+0x1f0>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8000fc8 <HAL_GPIO_Init+0x2f4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d00d      	beq.n	8000ec0 <HAL_GPIO_Init+0x1ec>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a49      	ldr	r2, [pc, #292]	@ (8000fcc <HAL_GPIO_Init+0x2f8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d007      	beq.n	8000ebc <HAL_GPIO_Init+0x1e8>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a48      	ldr	r2, [pc, #288]	@ (8000fd0 <HAL_GPIO_Init+0x2fc>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d101      	bne.n	8000eb8 <HAL_GPIO_Init+0x1e4>
 8000eb4:	2305      	movs	r3, #5
 8000eb6:	e00a      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000eb8:	2306      	movs	r3, #6
 8000eba:	e008      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	e006      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e004      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	e002      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e000      	b.n	8000ece <HAL_GPIO_Init+0x1fa>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ede:	4937      	ldr	r1, [pc, #220]	@ (8000fbc <HAL_GPIO_Init+0x2e8>)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eec:	4b39      	ldr	r3, [pc, #228]	@ (8000fd4 <HAL_GPIO_Init+0x300>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f10:	4a30      	ldr	r2, [pc, #192]	@ (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f16:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f3a:	4a26      	ldr	r2, [pc, #152]	@ (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f40:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f64:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f8e:	4a11      	ldr	r2, [pc, #68]	@ (8000fd4 <HAL_GPIO_Init+0x300>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3301      	adds	r3, #1
 8000f98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f47f ae9d 	bne.w	8000ce4 <HAL_GPIO_Init+0x10>
  }
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	371c      	adds	r7, #28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	48000400 	.word	0x48000400
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	48000c00 	.word	0x48000c00
 8000fcc:	48001000 	.word	0x48001000
 8000fd0:	48001400 	.word	0x48001400
 8000fd4:	40010400 	.word	0x40010400

08000fd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	887b      	ldrh	r3, [r7, #2]
 8000fea:	4013      	ands	r3, r2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	e001      	b.n	8000ffa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	807b      	strh	r3, [r7, #2]
 8001014:	4613      	mov	r3, r2
 8001016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001018:	787b      	ldrb	r3, [r7, #1]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800101e:	887a      	ldrh	r2, [r7, #2]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001024:	e002      	b.n	800102c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001026:	887a      	ldrh	r2, [r7, #2]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001044:	695a      	ldr	r2, [r3, #20]
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	4013      	ands	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d006      	beq.n	800105c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa74 	bl	8000544 <HAL_GPIO_EXTI_Callback>
  }
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40010400 	.word	0x40010400

08001068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d141      	bne.n	80010fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001076:	4b4b      	ldr	r3, [pc, #300]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800107e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001082:	d131      	bne.n	80010e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001084:	4b47      	ldr	r3, [pc, #284]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800108a:	4a46      	ldr	r2, [pc, #280]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001090:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001094:	4b43      	ldr	r3, [pc, #268]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800109c:	4a41      	ldr	r2, [pc, #260]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010a4:	4b40      	ldr	r3, [pc, #256]	@ (80011a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2232      	movs	r2, #50	@ 0x32
 80010aa:	fb02 f303 	mul.w	r3, r2, r3
 80010ae:	4a3f      	ldr	r2, [pc, #252]	@ (80011ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	0c9b      	lsrs	r3, r3, #18
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ba:	e002      	b.n	80010c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	3b01      	subs	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010c2:	4b38      	ldr	r3, [pc, #224]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010ce:	d102      	bne.n	80010d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f2      	bne.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010d6:	4b33      	ldr	r3, [pc, #204]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010e2:	d158      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e057      	b.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010e8:	4b2e      	ldr	r3, [pc, #184]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010ee:	4a2d      	ldr	r2, [pc, #180]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80010f8:	e04d      	b.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001100:	d141      	bne.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001102:	4b28      	ldr	r3, [pc, #160]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800110a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800110e:	d131      	bne.n	8001174 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001110:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001116:	4a23      	ldr	r2, [pc, #140]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001120:	4b20      	ldr	r3, [pc, #128]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001128:	4a1e      	ldr	r2, [pc, #120]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800112e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001130:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2232      	movs	r2, #50	@ 0x32
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	4a1c      	ldr	r2, [pc, #112]	@ (80011ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	0c9b      	lsrs	r3, r3, #18
 8001142:	3301      	adds	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001146:	e002      	b.n	800114e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	3b01      	subs	r3, #1
 800114c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800115a:	d102      	bne.n	8001162 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f2      	bne.n	8001148 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001162:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800116a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800116e:	d112      	bne.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e011      	b.n	8001198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800117a:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001180:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001184:	e007      	b.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800118e:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001190:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001194:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40007000 	.word	0x40007000
 80011a8:	2000003c 	.word	0x2000003c
 80011ac:	431bde83 	.word	0x431bde83

080011b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80011ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011be:	6093      	str	r3, [r2, #8]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40007000 	.word	0x40007000

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e2fe      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d075      	beq.n	80012da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ee:	4b97      	ldr	r3, [pc, #604]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011f8:	4b94      	ldr	r3, [pc, #592]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2b0c      	cmp	r3, #12
 8001206:	d102      	bne.n	800120e <HAL_RCC_OscConfig+0x3e>
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d002      	beq.n	8001214 <HAL_RCC_OscConfig+0x44>
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2b08      	cmp	r3, #8
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b8d      	ldr	r3, [pc, #564]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d05b      	beq.n	80012d8 <HAL_RCC_OscConfig+0x108>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d157      	bne.n	80012d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e2d9      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x74>
 8001236:	4b85      	ldr	r3, [pc, #532]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a84      	ldr	r2, [pc, #528]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e01d      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x98>
 800124e:	4b7f      	ldr	r3, [pc, #508]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a7e      	ldr	r2, [pc, #504]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b7c      	ldr	r3, [pc, #496]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a7b      	ldr	r2, [pc, #492]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e00b      	b.n	8001280 <HAL_RCC_OscConfig+0xb0>
 8001268:	4b78      	ldr	r3, [pc, #480]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a77      	ldr	r2, [pc, #476]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 800126e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b75      	ldr	r3, [pc, #468]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a74      	ldr	r2, [pc, #464]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 800127a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d013      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001288:	f7ff fc08 	bl	8000a9c <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001290:	f7ff fc04 	bl	8000a9c <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b64      	cmp	r3, #100	@ 0x64
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e29e      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012a2:	4b6a      	ldr	r3, [pc, #424]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f0      	beq.n	8001290 <HAL_RCC_OscConfig+0xc0>
 80012ae:	e014      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fbf4 	bl	8000a9c <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fbf0 	bl	8000a9c <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	@ 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e28a      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ca:	4b60      	ldr	r3, [pc, #384]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1f0      	bne.n	80012b8 <HAL_RCC_OscConfig+0xe8>
 80012d6:	e000      	b.n	80012da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d075      	beq.n	80013d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012e6:	4b59      	ldr	r3, [pc, #356]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
 80012ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012f0:	4b56      	ldr	r3, [pc, #344]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f003 0303 	and.w	r3, r3, #3
 80012f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	2b0c      	cmp	r3, #12
 80012fe:	d102      	bne.n	8001306 <HAL_RCC_OscConfig+0x136>
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d002      	beq.n	800130c <HAL_RCC_OscConfig+0x13c>
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	2b04      	cmp	r3, #4
 800130a:	d11f      	bne.n	800134c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800130c:	4b4f      	ldr	r3, [pc, #316]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_OscConfig+0x154>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e25d      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b49      	ldr	r3, [pc, #292]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	4946      	ldr	r1, [pc, #280]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001338:	4b45      	ldr	r3, [pc, #276]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fb61 	bl	8000a04 <HAL_InitTick>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d043      	beq.n	80013d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e249      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d023      	beq.n	800139c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001354:	4b3d      	ldr	r3, [pc, #244]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a3c      	ldr	r2, [pc, #240]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 800135a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800135e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001360:	f7ff fb9c 	bl	8000a9c <HAL_GetTick>
 8001364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001366:	e008      	b.n	800137a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001368:	f7ff fb98 	bl	8000a9c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e232      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800137a:	4b34      	ldr	r3, [pc, #208]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0f0      	beq.n	8001368 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b31      	ldr	r3, [pc, #196]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	061b      	lsls	r3, r3, #24
 8001394:	492d      	ldr	r1, [pc, #180]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
 800139a:	e01a      	b.n	80013d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139c:	4b2b      	ldr	r3, [pc, #172]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a2a      	ldr	r2, [pc, #168]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 80013a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fb78 	bl	8000a9c <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff fb74 	bl	8000a9c <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e20e      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c2:	4b22      	ldr	r3, [pc, #136]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1e0>
 80013ce:	e000      	b.n	80013d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d041      	beq.n	8001462 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d01c      	beq.n	8001420 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e6:	4b19      	ldr	r3, [pc, #100]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 80013e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80013ec:	4a17      	ldr	r2, [pc, #92]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f6:	f7ff fb51 	bl	8000a9c <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fe:	f7ff fb4d 	bl	8000a9c <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e1e7      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001410:	4b0e      	ldr	r3, [pc, #56]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0ef      	beq.n	80013fe <HAL_RCC_OscConfig+0x22e>
 800141e:	e020      	b.n	8001462 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001420:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001426:	4a09      	ldr	r2, [pc, #36]	@ (800144c <HAL_RCC_OscConfig+0x27c>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fb34 	bl	8000a9c <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001436:	e00d      	b.n	8001454 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fb30 	bl	8000a9c <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d906      	bls.n	8001454 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e1ca      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	20000040 	.word	0x20000040
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001454:	4b8c      	ldr	r3, [pc, #560]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1ea      	bne.n	8001438 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80a6 	beq.w	80015bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001470:	2300      	movs	r3, #0
 8001472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001474:	4b84      	ldr	r3, [pc, #528]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_OscConfig+0x2b4>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x2b6>
 8001484:	2300      	movs	r3, #0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00d      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b7f      	ldr	r3, [pc, #508]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800148e:	4a7e      	ldr	r2, [pc, #504]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001494:	6593      	str	r3, [r2, #88]	@ 0x58
 8001496:	4b7c      	ldr	r3, [pc, #496]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014a2:	2301      	movs	r3, #1
 80014a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a6:	4b79      	ldr	r3, [pc, #484]	@ (800168c <HAL_RCC_OscConfig+0x4bc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d118      	bne.n	80014e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014b2:	4b76      	ldr	r3, [pc, #472]	@ (800168c <HAL_RCC_OscConfig+0x4bc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a75      	ldr	r2, [pc, #468]	@ (800168c <HAL_RCC_OscConfig+0x4bc>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014be:	f7ff faed 	bl	8000a9c <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c6:	f7ff fae9 	bl	8000a9c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e183      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d8:	4b6c      	ldr	r3, [pc, #432]	@ (800168c <HAL_RCC_OscConfig+0x4bc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d108      	bne.n	80014fe <HAL_RCC_OscConfig+0x32e>
 80014ec:	4b66      	ldr	r3, [pc, #408]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80014ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014f2:	4a65      	ldr	r2, [pc, #404]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80014fc:	e024      	b.n	8001548 <HAL_RCC_OscConfig+0x378>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b05      	cmp	r3, #5
 8001504:	d110      	bne.n	8001528 <HAL_RCC_OscConfig+0x358>
 8001506:	4b60      	ldr	r3, [pc, #384]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800150c:	4a5e      	ldr	r2, [pc, #376]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001516:	4b5c      	ldr	r3, [pc, #368]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800151c:	4a5a      	ldr	r2, [pc, #360]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001526:	e00f      	b.n	8001548 <HAL_RCC_OscConfig+0x378>
 8001528:	4b57      	ldr	r3, [pc, #348]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800152e:	4a56      	ldr	r2, [pc, #344]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001538:	4b53      	ldr	r3, [pc, #332]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800153e:	4a52      	ldr	r2, [pc, #328]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d016      	beq.n	800157e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff faa4 	bl	8000a9c <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001556:	e00a      	b.n	800156e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001558:	f7ff faa0 	bl	8000a9c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001566:	4293      	cmp	r3, r2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e138      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800156e:	4b46      	ldr	r3, [pc, #280]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ed      	beq.n	8001558 <HAL_RCC_OscConfig+0x388>
 800157c:	e015      	b.n	80015aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157e:	f7ff fa8d 	bl	8000a9c <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fa89 	bl	8000a9c <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e121      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800159c:	4b3a      	ldr	r3, [pc, #232]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800159e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ed      	bne.n	8001586 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015aa:	7ffb      	ldrb	r3, [r7, #31]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d105      	bne.n	80015bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b0:	4b35      	ldr	r3, [pc, #212]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80015b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b4:	4a34      	ldr	r2, [pc, #208]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80015b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0320 	and.w	r3, r3, #32
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d03c      	beq.n	8001642 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d01c      	beq.n	800160a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80015d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80015d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fa5c 	bl	8000a9c <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015e8:	f7ff fa58 	bl	8000a9c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e0f2      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015fa:	4b23      	ldr	r3, [pc, #140]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 80015fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ef      	beq.n	80015e8 <HAL_RCC_OscConfig+0x418>
 8001608:	e01b      	b.n	8001642 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800160a:	4b1f      	ldr	r3, [pc, #124]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800160c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001610:	4a1d      	ldr	r2, [pc, #116]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161a:	f7ff fa3f 	bl	8000a9c <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001622:	f7ff fa3b 	bl	8000a9c <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0d5      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001634:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001636:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1ef      	bne.n	8001622 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80c9 	beq.w	80017de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800164c:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b0c      	cmp	r3, #12
 8001656:	f000 8083 	beq.w	8001760 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d15e      	bne.n	8001720 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800166c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800166e:	f7ff fa15 	bl	8000a9c <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001674:	e00c      	b.n	8001690 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff fa11 	bl	8000a9c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d905      	bls.n	8001690 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e0ab      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
 8001688:	40021000 	.word	0x40021000
 800168c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001690:	4b55      	ldr	r3, [pc, #340]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1ec      	bne.n	8001676 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169c:	4b52      	ldr	r3, [pc, #328]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	4b52      	ldr	r3, [pc, #328]	@ (80017ec <HAL_RCC_OscConfig+0x61c>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6a11      	ldr	r1, [r2, #32]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016ac:	3a01      	subs	r2, #1
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	4311      	orrs	r1, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80016b6:	0212      	lsls	r2, r2, #8
 80016b8:	4311      	orrs	r1, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016be:	0852      	lsrs	r2, r2, #1
 80016c0:	3a01      	subs	r2, #1
 80016c2:	0552      	lsls	r2, r2, #21
 80016c4:	4311      	orrs	r1, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016ca:	0852      	lsrs	r2, r2, #1
 80016cc:	3a01      	subs	r2, #1
 80016ce:	0652      	lsls	r2, r2, #25
 80016d0:	4311      	orrs	r1, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80016d6:	06d2      	lsls	r2, r2, #27
 80016d8:	430a      	orrs	r2, r1
 80016da:	4943      	ldr	r1, [pc, #268]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016e0:	4b41      	ldr	r3, [pc, #260]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a40      	ldr	r2, [pc, #256]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 80016e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016ec:	4b3e      	ldr	r3, [pc, #248]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4a3d      	ldr	r2, [pc, #244]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 80016f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f8:	f7ff f9d0 	bl	8000a9c <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff f9cc 	bl	8000a9c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e066      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001712:	4b35      	ldr	r3, [pc, #212]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x530>
 800171e:	e05e      	b.n	80017de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001720:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a30      	ldr	r2, [pc, #192]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001726:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff f9b6 	bl	8000a9c <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff f9b2 	bl	8000a9c <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e04c      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001746:	4b28      	ldr	r3, [pc, #160]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001752:	4b25      	ldr	r3, [pc, #148]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	4924      	ldr	r1, [pc, #144]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 8001758:	4b25      	ldr	r3, [pc, #148]	@ (80017f0 <HAL_RCC_OscConfig+0x620>)
 800175a:	4013      	ands	r3, r2
 800175c:	60cb      	str	r3, [r1, #12]
 800175e:	e03e      	b.n	80017de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e039      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800176c:	4b1e      	ldr	r3, [pc, #120]	@ (80017e8 <HAL_RCC_OscConfig+0x618>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 0203 	and.w	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	429a      	cmp	r2, r3
 800177e:	d12c      	bne.n	80017da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178a:	3b01      	subs	r3, #1
 800178c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d123      	bne.n	80017da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d11b      	bne.n	80017da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d113      	bne.n	80017da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	085b      	lsrs	r3, r3, #1
 80017be:	3b01      	subs	r3, #1
 80017c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d109      	bne.n	80017da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d0:	085b      	lsrs	r3, r3, #1
 80017d2:	3b01      	subs	r3, #1
 80017d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d001      	beq.n	80017de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3720      	adds	r7, #32
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40021000 	.word	0x40021000
 80017ec:	019f800c 	.word	0x019f800c
 80017f0:	feeefffc 	.word	0xfeeefffc

080017f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e11e      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b91      	ldr	r3, [pc, #580]	@ (8001a54 <HAL_RCC_ClockConfig+0x260>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d910      	bls.n	800183c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b8e      	ldr	r3, [pc, #568]	@ (8001a54 <HAL_RCC_ClockConfig+0x260>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 020f 	bic.w	r2, r3, #15
 8001822:	498c      	ldr	r1, [pc, #560]	@ (8001a54 <HAL_RCC_ClockConfig+0x260>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b8a      	ldr	r3, [pc, #552]	@ (8001a54 <HAL_RCC_ClockConfig+0x260>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e106      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d073      	beq.n	8001930 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b03      	cmp	r3, #3
 800184e:	d129      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001850:	4b81      	ldr	r3, [pc, #516]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0f4      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001860:	f000 f966 	bl	8001b30 <RCC_GetSysClockFreqFromPLLSource>
 8001864:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4a7c      	ldr	r2, [pc, #496]	@ (8001a5c <HAL_RCC_ClockConfig+0x268>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d93f      	bls.n	80018ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800186e:	4b7a      	ldr	r3, [pc, #488]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d009      	beq.n	800188e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001882:	2b00      	cmp	r3, #0
 8001884:	d033      	beq.n	80018ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800188a:	2b00      	cmp	r3, #0
 800188c:	d12f      	bne.n	80018ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800188e:	4b72      	ldr	r3, [pc, #456]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001896:	4a70      	ldr	r2, [pc, #448]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800189c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800189e:	2380      	movs	r3, #128	@ 0x80
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e024      	b.n	80018ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d107      	bne.n	80018bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d109      	bne.n	80018cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0c6      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018bc:	4b66      	ldr	r3, [pc, #408]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0be      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018cc:	f000 f8ce 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4a61      	ldr	r2, [pc, #388]	@ (8001a5c <HAL_RCC_ClockConfig+0x268>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d909      	bls.n	80018ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018da:	4b5f      	ldr	r3, [pc, #380]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80018e2:	4a5d      	ldr	r2, [pc, #372]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80018e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f023 0203 	bic.w	r2, r3, #3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	4957      	ldr	r1, [pc, #348]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001900:	f7ff f8cc 	bl	8000a9c <HAL_GetTick>
 8001904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	e00a      	b.n	800191e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001908:	f7ff f8c8 	bl	8000a9c <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e095      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 020c 	and.w	r2, r3, #12
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	429a      	cmp	r2, r3
 800192e:	d1eb      	bne.n	8001908 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d023      	beq.n	8001984 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001948:	4b43      	ldr	r3, [pc, #268]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	4a42      	ldr	r2, [pc, #264]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 800194e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001952:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001960:	4b3d      	ldr	r3, [pc, #244]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001968:	4a3b      	ldr	r2, [pc, #236]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 800196a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800196e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001970:	4b39      	ldr	r3, [pc, #228]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4936      	ldr	r1, [pc, #216]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 800197e:	4313      	orrs	r3, r2
 8001980:	608b      	str	r3, [r1, #8]
 8001982:	e008      	b.n	8001996 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b80      	cmp	r3, #128	@ 0x80
 8001988:	d105      	bne.n	8001996 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800198a:	4b33      	ldr	r3, [pc, #204]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	4a32      	ldr	r2, [pc, #200]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001990:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001994:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001996:	4b2f      	ldr	r3, [pc, #188]	@ (8001a54 <HAL_RCC_ClockConfig+0x260>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 030f 	and.w	r3, r3, #15
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d21d      	bcs.n	80019e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a54 <HAL_RCC_ClockConfig+0x260>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 020f 	bic.w	r2, r3, #15
 80019ac:	4929      	ldr	r1, [pc, #164]	@ (8001a54 <HAL_RCC_ClockConfig+0x260>)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019b4:	f7ff f872 	bl	8000a9c <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff f86e 	bl	8000a9c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e03b      	b.n	8001a4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <HAL_RCC_ClockConfig+0x260>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1ed      	bne.n	80019bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4917      	ldr	r1, [pc, #92]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0a:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	490f      	ldr	r1, [pc, #60]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a1e:	f000 f825 	bl	8001a6c <HAL_RCC_GetSysClockFreq>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <HAL_RCC_ClockConfig+0x264>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	490c      	ldr	r1, [pc, #48]	@ (8001a60 <HAL_RCC_ClockConfig+0x26c>)
 8001a30:	5ccb      	ldrb	r3, [r1, r3]
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	fa22 f303 	lsr.w	r3, r2, r3
 8001a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <HAL_RCC_ClockConfig+0x270>)
 8001a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <HAL_RCC_ClockConfig+0x274>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe ffde 	bl	8000a04 <HAL_InitTick>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40022000 	.word	0x40022000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	04c4b400 	.word	0x04c4b400
 8001a60:	08001c44 	.word	0x08001c44
 8001a64:	2000003c 	.word	0x2000003c
 8001a68:	20000040 	.word	0x20000040

08001a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a72:	4b2c      	ldr	r3, [pc, #176]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d102      	bne.n	8001a84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	e047      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a84:	4b27      	ldr	r3, [pc, #156]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d102      	bne.n	8001a96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a90:	4b26      	ldr	r3, [pc, #152]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	e03e      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a96:	4b23      	ldr	r3, [pc, #140]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d136      	bne.n	8001b10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aa2:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d10c      	bne.n	8001ada <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8001b2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	4a16      	ldr	r2, [pc, #88]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aca:	68d2      	ldr	r2, [r2, #12]
 8001acc:	0a12      	lsrs	r2, r2, #8
 8001ace:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	617b      	str	r3, [r7, #20]
      break;
 8001ad8:	e00c      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ada:	4a13      	ldr	r2, [pc, #76]	@ (8001b28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae2:	4a10      	ldr	r2, [pc, #64]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae4:	68d2      	ldr	r2, [r2, #12]
 8001ae6:	0a12      	lsrs	r2, r2, #8
 8001ae8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	617b      	str	r3, [r7, #20]
      break;
 8001af2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001af4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0e5b      	lsrs	r3, r3, #25
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	3301      	adds	r3, #1
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	e001      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b14:	693b      	ldr	r3, [r7, #16]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	371c      	adds	r7, #28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	00f42400 	.word	0x00f42400
 8001b2c:	016e3600 	.word	0x016e3600

08001b30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b36:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	091b      	lsrs	r3, r3, #4
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d10c      	bne.n	8001b6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b54:	4a17      	ldr	r2, [pc, #92]	@ (8001bb4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	4a14      	ldr	r2, [pc, #80]	@ (8001bb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b5e:	68d2      	ldr	r2, [r2, #12]
 8001b60:	0a12      	lsrs	r2, r2, #8
 8001b62:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b66:	fb02 f303 	mul.w	r3, r2, r3
 8001b6a:	617b      	str	r3, [r7, #20]
    break;
 8001b6c:	e00c      	b.n	8001b88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b6e:	4a12      	ldr	r2, [pc, #72]	@ (8001bb8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b78:	68d2      	ldr	r2, [r2, #12]
 8001b7a:	0a12      	lsrs	r2, r2, #8
 8001b7c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	617b      	str	r3, [r7, #20]
    break;
 8001b86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b88:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	0e5b      	lsrs	r3, r3, #25
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	3301      	adds	r3, #1
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001ba2:	687b      	ldr	r3, [r7, #4]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	016e3600 	.word	0x016e3600
 8001bb8:	00f42400 	.word	0x00f42400

08001bbc <memset>:
 8001bbc:	4402      	add	r2, r0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d100      	bne.n	8001bc6 <memset+0xa>
 8001bc4:	4770      	bx	lr
 8001bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8001bca:	e7f9      	b.n	8001bc0 <memset+0x4>

08001bcc <__libc_init_array>:
 8001bcc:	b570      	push	{r4, r5, r6, lr}
 8001bce:	4d0d      	ldr	r5, [pc, #52]	@ (8001c04 <__libc_init_array+0x38>)
 8001bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8001c08 <__libc_init_array+0x3c>)
 8001bd2:	1b64      	subs	r4, r4, r5
 8001bd4:	10a4      	asrs	r4, r4, #2
 8001bd6:	2600      	movs	r6, #0
 8001bd8:	42a6      	cmp	r6, r4
 8001bda:	d109      	bne.n	8001bf0 <__libc_init_array+0x24>
 8001bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8001c0c <__libc_init_array+0x40>)
 8001bde:	4c0c      	ldr	r4, [pc, #48]	@ (8001c10 <__libc_init_array+0x44>)
 8001be0:	f000 f818 	bl	8001c14 <_init>
 8001be4:	1b64      	subs	r4, r4, r5
 8001be6:	10a4      	asrs	r4, r4, #2
 8001be8:	2600      	movs	r6, #0
 8001bea:	42a6      	cmp	r6, r4
 8001bec:	d105      	bne.n	8001bfa <__libc_init_array+0x2e>
 8001bee:	bd70      	pop	{r4, r5, r6, pc}
 8001bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bf4:	4798      	blx	r3
 8001bf6:	3601      	adds	r6, #1
 8001bf8:	e7ee      	b.n	8001bd8 <__libc_init_array+0xc>
 8001bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bfe:	4798      	blx	r3
 8001c00:	3601      	adds	r6, #1
 8001c02:	e7f2      	b.n	8001bea <__libc_init_array+0x1e>
 8001c04:	08001c54 	.word	0x08001c54
 8001c08:	08001c54 	.word	0x08001c54
 8001c0c:	08001c54 	.word	0x08001c54
 8001c10:	08001c58 	.word	0x08001c58

08001c14 <_init>:
 8001c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c16:	bf00      	nop
 8001c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c1a:	bc08      	pop	{r3}
 8001c1c:	469e      	mov	lr, r3
 8001c1e:	4770      	bx	lr

08001c20 <_fini>:
 8001c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c22:	bf00      	nop
 8001c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c26:	bc08      	pop	{r3}
 8001c28:	469e      	mov	lr, r3
 8001c2a:	4770      	bx	lr
